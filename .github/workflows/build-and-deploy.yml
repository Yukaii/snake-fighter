name: Build and Push Snake Fighter Docker Images

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR Number (for review app deployment)'
        required: false
        type: string
      commit_sha:
        description: 'Commit SHA (optional, defaults to HEAD)'
        required: false
        type: string
      deploy_review_app:
        description: 'Deploy review app after build'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/snake-fighter

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      commit-sha: ${{ steps.commit-info.outputs.sha }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get commit SHA
        id: commit-info
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=sha-${{ steps.commit-info.outputs.sha }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Generate build summary
        run: |
          echo "## 🐍 Snake Fighter Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ steps.commit-info.outputs.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** " >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  # Deploy review app for PRs with review-app label or manual dispatch
  deploy-review-app:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'review-app')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_review_app == 'true')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "COMMIT_SHA=${{ needs.build-and-push.outputs.commit-sha }}" >> $GITHUB_ENV
            echo "TRIGGER_TYPE=automatic" >> $GITHUB_ENV
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_ENV
            echo "COMMIT_SHA=${{ github.event.inputs.commit_sha || needs.build-and-push.outputs.commit-sha }}" >> $GITHUB_ENV
            echo "TRIGGER_TYPE=manual" >> $GITHUB_ENV
            echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Deploy to Zeabur
        env:
          ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}
          IMAGE_DIGEST: ${{ needs.build-and-push.outputs.image-digest }}
        run: |
          echo "🚀 Deploying Snake Fighter review app"
          echo "📝 Commit: ${COMMIT_SHA}"
          echo "🏷️ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${COMMIT_SHA}"
          echo "🔧 Trigger: ${TRIGGER_TYPE}"
          
          # Create unique service name for this PR/branch
          SERVICE_NAME="snake-fighter-${BRANCH_NAME//[^a-zA-Z0-9]/-}"
          SERVICE_NAME="${SERVICE_NAME,,}" # Convert to lowercase
          SERVICE_NAME="${SERVICE_NAME:0:50}" # Limit length
          
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_ENV
          
          # Deploy using Zeabur CLI (if available) or API
          if command -v zeabur &> /dev/null; then
            echo "📦 Deploying with Zeabur CLI..."
            zeabur deploy --image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${COMMIT_SHA}" --service-name "${SERVICE_NAME}"
          else
            echo "🔧 Zeabur CLI not available, using API deployment..."
            # You can implement API-based deployment here if needed
            echo "⚠️ Manual deployment required - image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${COMMIT_SHA}"
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const commitSha = process.env.COMMIT_SHA;
            const serviceName = process.env.SERVICE_NAME;
            const shortCommit = commitSha ? commitSha.substring(0, 8) : 'unknown';
            
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });
              
              // Check if we already have a review app comment
              const botComment = comments.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('🐍 Snake Fighter Review App')
              );
              
              const imageUrl = `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${commitSha}`;
              
              const commentBody = `## 🐍 Snake Fighter Review App Deployed
              
              Your multiplayer snake game is ready for testing!
              
              **🎮 Game Features:**
              - Real-time multiplayer (up to 8 players)
              - WebSocket-powered gameplay
              - Room-based battles
              - Responsive React frontend
              
              **🔧 Deployment Details:**
              **📦 Docker Image:** \`${imageUrl}\`
              **🏷️ Service:** \`${serviceName}\`
              **💻 Commit:** \`${shortCommit}\` ([view](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commitSha}))
              **🏗️ Built with:** Node.js + React + Caddy
              
              ### 🎯 How to Test:
              1. Open the review app URL
              2. Create a new game room or join an existing one
              3. Share the room code with other players
              4. Use arrow keys or WASD to control your snake
              5. Battle for the highest score!
              
              ### 🧹 Cleanup:
              - Review app will be automatically cleaned up when this PR is closed
              - Each new commit will update the existing deployment
              
              *Built and deployed automatically with GitHub Actions + Zeabur*`;

              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
                console.log('✅ Updated existing PR comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: commentBody
                });
                console.log('✅ Created new PR comment');
              }
            } catch (error) {
              console.log('⚠️ Failed to comment on PR:', error.message);
              // Don't fail the job if commenting fails
            }

      - name: Output deployment info
        run: |
          echo "🎉 Snake Fighter deployment completed!"
          echo "🏷️ Service Name: ${SERVICE_NAME}"
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${COMMIT_SHA}"
          echo "💻 Commit: ${COMMIT_SHA}"

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      security-events: write
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ needs.build-and-push.outputs.commit-sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'